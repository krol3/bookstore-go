name: Build
run-name: ${{ github.actor }} Pipeline AppSec Demo ðŸš€
permissions: read-all
env:
  VM: ubuntu-20.04
on:
  push:
    branches: [main, ci-v*]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:

  Code-Quality:
    name: Code quality
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: sh    # By default sh, using bash for compatibility with Make
    timeout-minutes: 5
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.17.0'] #['stable', 'oldstable', 1.20]    
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
      - run: go version
      - name: Formating Code 
        run: gofmt -s -w . && git diff --exit-code #make format     
      - name: Linter 
        continue-on-error: true
        run: go vet ./... #make vet

  Testing:
    name: Testing code
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: sh    # By default sh, using bash for compatibility with Make
    timeout-minutes: 5
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.20.4','stable', 'oldstable']
    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true            
      - name: Go Build
        run: go build -o /dev/null ./...
      - name: Go Test
        if: ${{ !inputs.skipTests }}
        run: go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...
      - name: Go Benchmark
        if: ${{ !inputs.skipTests }}
        run: go test -v -shuffle=on -run=- -bench=. -benchtime=1x ./...
      - name: Unit Tests
        run: echo "Integration Testing echo"        
      - name: Integration Tests
        run: echo "Integration Testing echo"

  Secret-Scanning:
    name: Secret scanning
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITLEAKS_LICENSE: ${{ secrets.GITLEAKS_LICENSE}}

  Dependency-Check:
    name: Check dependencies
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.17.0'] #['stable', 'oldstable', 1.20]    
    steps:
      - name: Check out code
        uses: actions/checkout@v3    
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true       
      - name: Go Tidy
        run: go mod tidy && git diff --exit-code go.mod
      - name: Go Mod
        run: go mod download
      - name: Go Mod Verify
        run: go mod verify
      - name: Go Generate
        run: go generate ./... && git diff --exit-code
      - name: Upload Coverage
        if: ${{ !inputs.skipTests }}
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.txt
          fail_ci_if_error: false        

  Vulnerability-Scanning:
    name: Vulnerability scanning
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Run Trivy vulnerability scanner"
        uses: "aquasecurity/trivy-action@master"
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL"
          image-ref:
      - id: govulncheck
        uses: golang/govulncheck-action@v0.1.0            

  SAST:
    name: SAST
    runs-on: ubuntu-latest
    steps:  
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3    
    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: ./...    
    - uses: dominikh/staticcheck-action@v1.2.0
      with:
        version: "2022.1"
      
  SAST-Semgrep:
    name: SAST with semgrep
    runs-on: ubuntu-20.04
    container:
      image: returntocorp/semgrep
    # Skip any PR created by dependabot to avoid permission issues:
    if: (github.actor != 'dependabot[bot]')
    steps:
      # Fetch project source with GitHub Actions Checkout.
      - uses: actions/checkout@v3
      # Run the "semgrep ci" command on the command line of the docker image.
      - run: semgrep ci
        env:
            # Add the rules that Semgrep uses by setting the SEMGREP_RULES environment variable. 
            SEMGREP_RULES: p/default # more at semgrep.dev/explore

  DAST:
    name: DAST
    runs-on: ubuntu-latest
    steps:
    - name: Dast demo
      run: echo "DAST for the future"  

  Supply-Chain:
    name: Supply chain
    runs-on: ubuntu-latest
    steps:
    - name: Check out code into the Go module directory
      uses: actions/checkout@v3
    - name: Signing binaries
      run: echo "Signing the package"            
