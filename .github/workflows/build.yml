name: Build
run-name: ${{ github.actor }} Pipeline Demo - GH ðŸš€
permissions: read-all
env:
  VM: ubuntu-20.04

on:
  push:
    branches: [main, ci-v*]
  pull_request:
    branches: ["*"]
  workflow_dispatch:

jobs:
  Linter:
    name: Code-Quality-Go
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: sh    # By default sh, using bash for compatibility with Make
    timeout-minutes: 5
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.17.0'] #['stable', 'oldstable', 1.20]

    steps:
      - name: Check out code
        uses: actions/checkout@v3

      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true
      - run: go version

      - name: Formating Code 
        run: gofmt -s -w . && git diff --exit-code #make format     

      - name: Linter 
        continue-on-error: true
        run: go vet ./... #make vet

  Dependencies:
    name: "Check dependencies"
    runs-on: "ubuntu-20.04"
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.17.0'] #['stable', 'oldstable', 1.20]    
    steps:
      - name: Check out code
        uses: actions/checkout@v3    
      - name: Install Go
        uses: actions/setup-go@v4
        with:
          go-version: ${{ matrix.go }}
          check-latest: true       
      - name: Go Tidy
        run: go mod tidy && git diff --exit-code go.mod

      - name: Go Mod
        run: go mod download

      - name: Go Mod Verify
        run: go mod verify

      - name: Go Generate
        run: go generate ./... && git diff --exit-code

  Build-Test:
    name: Build-Test-Code
    runs-on: ubuntu-20.04
    defaults:
      run:
        shell: sh    # By default sh, using bash for compatibility with Make
    timeout-minutes: 5
    strategy:
      fail-fast: true
      matrix:
        go: ['>=1.20.4','stable', 'oldstable']

    steps:
      - name: Check out code
        uses: actions/checkout@v3
      - name: Go Build
        run: go build -o /dev/null ./...

      - name: Go Test
        if: ${{ !inputs.skipTests }}
        run: go test -v -count=1 -race -shuffle=on -coverprofile=coverage.txt ./...

      - name: Go Benchmark
        if: ${{ !inputs.skipTests }}
        run: go test -v -shuffle=on -run=- -bench=. -benchtime=1x ./...

      - name: Upload Coverage
        if: ${{ !inputs.skipTests }}
        uses: codecov/codecov-action@v3
        continue-on-error: true
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          file: ./coverage.txt
          fail_ci_if_error: false        

  Secret-Scanning:
    name: "Secret Scanning"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  Vulnerability-Scanning:
    name: "Vulnerability Scanning in Go"
    runs-on: "ubuntu-20.04"
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: "Run Trivy vulnerability scanner"
        uses: "aquasecurity/trivy-action@master"
        with:
          scan-type: "fs"
          ignore-unfixed: true
          format: "table"
          severity: "CRITICAL"
          image-ref:
      - id: govulncheck
        uses: golang/govulncheck-action@v0.1.0            

